<!--
  Copyright (c) 2025 ogt11.com, llc
-->
<div class="container">
    <h1 class="mdc-typography--headline4">Certificate Request Debug</h1>
    
    <div class="debug-section">
        <h2 class="mdc-typography--headline6">Test Controls</h2>
        <div class="test-data">
            <div>
                <label>Username:</label>
                <span id="username-display"></span>
            </div>
            <div>
                <label>Email:</label>
                <span id="email-display"></span>
            </div>
            <div>
                <label>Validation Token:</label>
                <span id="token-display"></span>
            </div>
        </div>
        <div class="button-group">
            <button id="testButton" class="mdc-button mdc-button--raised">
                <span class="mdc-button__ripple"></span>
                <span class="mdc-button__label">Run Test</span>
            </button>
            <button id="clearLog" class="mdc-button mdc-button--outlined">
                <span class="mdc-button__ripple"></span>
                <span class="mdc-button__label">Clear Log</span>
            </button>
            <button id="stopTest" class="mdc-button mdc-button--outlined" style="display: none;">
                <span class="mdc-button__ripple"></span>
                <span class="mdc-button__label">Stop Test</span>
            </button>
        </div>
    </div>
    
    <div class="debug-section">
        <h2 class="mdc-typography--headline6">Test Log</h2>
        <div class="log" id="log"></div>
    </div>
</div>

<style>
.container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
}

.debug-section {
    margin-bottom: 2rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 4px;
}

.test-data {
    background: #f0f0f0;
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
}

.button-group {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}

.log {
    background: #f5f5f5;
    padding: 10px;
    height: 500px;
    overflow-y: auto;
    font-family: monospace;
    white-space: pre-wrap;
}

.error {
    color: red;
}

.success {
    color: green;
}

.info {
    color: blue;
}

.mdc-button {
    margin: 0;
}

#stopTest {
    display: none;
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/forge/1.3.1/forge.min.js"></script>
<script>
    const log = document.getElementById('log');
    const testButton = document.getElementById('testButton');
    const clearButton = document.getElementById('clearLog');
    const stopButton = document.getElementById('stopTest');
    const usernameDisplay = document.getElementById('username-display');
    const emailDisplay = document.getElementById('email-display');
    const tokenDisplay = document.getElementById('token-display');
    
    let isTestRunning = false;
    let abortController = null;
    
    function generateTestData() {
        const timestamp = Date.now();
        const random = Math.floor(Math.random() * 1000);
        const username = `testuser_${timestamp}_${random}`;
        const email = `${username}@test.example.com`;
        
        return { username, email };
    }
    
    async function getValidationToken(userData) {
        appendLog('Requesting validation token...');
        try {
            // First, create a user request
            const response = await fetch('/request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username: userData.username,
                    email: userData.email,
                    displayName: userData.username
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to create user request');
            }
            
            // The response should contain a validation token
            const result = await response.json();
            if (!result.validationToken) {
                throw new Error('No validation token received');
            }
            
            appendLog('Validation token received', 'success');
            return result.validationToken;
        } catch (error) {
            appendLog(`Error getting validation token: ${error.message}`, 'error');
            throw error;
        }
    }
    
    function updateDisplay(testData, token) {
        usernameDisplay.textContent = testData.username;
        emailDisplay.textContent = testData.email;
        tokenDisplay.textContent = token;
    }
    
    function appendLog(message, type = '') {
        const entry = document.createElement('div');
        entry.className = type;
        entry.textContent = message;
        log.appendChild(entry);
        log.scrollTop = log.scrollHeight;
    }
    
    function clearLog() {
        log.innerHTML = '';
    }
    
    function updateButtonState(running) {
        isTestRunning = running;
        testButton.disabled = running;
        stopButton.style.display = running ? 'block' : 'none';
    }
    
    async function generateKeyPair() {
        appendLog('Generating key pair...');
        return new Promise((resolve, reject) => {
            try {
                const keyPair = forge.pki.rsa.generateKeyPair({ bits: 2048 });
                appendLog('Key pair generated successfully', 'success');
                resolve(keyPair);
            } catch (error) {
                appendLog(`Error generating key pair: ${error.message}`, 'error');
                reject(error);
            }
        });
    }
    
    async function generateCSR(keyPair, userData) {
        appendLog('Creating CSR with user details...');
        return new Promise((resolve, reject) => {
            try {
                const csr = forge.pki.createCertificationRequest();
                csr.publicKey = keyPair.publicKey;
                csr.setSubject([{
                    name: 'commonName',
                    value: userData.username
                }, {
                    name: 'emailAddress',
                    value: userData.email
                }]);
                csr.sign(keyPair.privateKey, forge.md.sha256.create());
                appendLog('CSR created successfully', 'success');
                resolve(csr);
            } catch (error) {
                appendLog(`Error creating CSR: ${error.message}`, 'error');
                reject(error);
            }
        });
    }
    
    async function submitCSR(csr, validationData) {
        appendLog('Sending CSR to server...');
        try {
            abortController = new AbortController();
            const response = await fetch('/request/cert-request/api/cert-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    csr: forge.pki.certificationRequestToPem(csr),
                    username: validationData.username,
                    email: validationData.email,
                    validationToken: validationData.token
                }),
                signal: abortController.signal
            });
            
            const result = await response.json();
            appendLog('Server response:', 'info');
            appendLog(JSON.stringify(result, null, 2), 'info');
            
            if (response.ok) {
                appendLog('Server response OK, starting certificate processing...', 'success');
                return result;
            } else {
                throw new Error(result.error || 'Failed to submit certificate request');
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                appendLog('Request aborted by user', 'error');
            } else {
                appendLog(`Error submitting CSR: ${error.message}`, 'error');
            }
            throw error;
        }
    }
    
    async function processCertificate(certificate) {
        appendLog('Processing certificate...');
        try {
            // Clean up the certificate string
            const cleanCert = certificate
                .replace(/\r\n/g, '\n')
                .replace(/\n\n/g, '\n')
                .trim();
            
            appendLog('Cleaned certificate PEM:', 'info');
            appendLog(cleanCert, 'info');
            
            // Log certificate structure
            appendLog('Certificate structure:', 'info');
            appendLog(JSON.stringify({
                hasBegin: cleanCert.includes('-----BEGIN CERTIFICATE-----'),
                hasEnd: cleanCert.includes('-----END CERTIFICATE-----'),
                lineCount: cleanCert.split('\n').length,
                firstLine: cleanCert.split('\n')[0],
                lastLine: cleanCert.split('\n').slice(-1)[0],
                base64Length: cleanCert
                    .replace('-----BEGIN CERTIFICATE-----', '')
                    .replace('-----END CERTIFICATE-----', '')
                    .trim()
                    .length
            }, null, 2), 'info');
            
            const certObj = forge.pki.certificateFromPem(cleanCert);
            appendLog('Certificate parsed successfully', 'success');
            
            const fingerprint = forge.md.sha256.create()
                .update(forge.asn1.toDer(forge.pki.certificateToAsn1(certObj)).getBytes())
                .digest()
                .toHex();
            appendLog(`Fingerprint generated: ${fingerprint}`, 'success');
            
            return { certObj, fingerprint };
        } catch (error) {
            appendLog(`Error processing certificate: ${error.message}`, 'error');
            throw error;
        }
    }
    
    async function runTest() {
        if (isTestRunning) return;
        
        clearLog();
        updateButtonState(true);
        appendLog('Starting test...');
        
        try {
            // Generate new test data
            const testData = generateTestData();
            appendLog('Generated test data:', 'info');
            appendLog(JSON.stringify(testData, null, 2), 'info');
            
            // Get validation token
            const token = await getValidationToken(testData);
            updateDisplay(testData, token);
            
            const keyPair = await generateKeyPair();
            const csr = await generateCSR(keyPair, testData);
            const result = await submitCSR(csr, { ...testData, token });
            await processCertificate(result.certificate);
            
            appendLog('Test completed successfully!', 'success');
        } catch (error) {
            if (error.name !== 'AbortError') {
                appendLog(`Test failed: ${error.message}`, 'error');
            }
        } finally {
            updateButtonState(false);
            abortController = null;
        }
    }
    
    function stopTest() {
        if (abortController) {
            abortController.abort();
        }
    }
    
    // Event listeners
    testButton.addEventListener('click', runTest);
    clearButton.addEventListener('click', clearLog);
    stopButton.addEventListener('click', stopTest);
</script> 